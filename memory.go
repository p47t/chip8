package chip8

import "fmt"

const (
	MemorySize = 4096
)

type Memory [MemorySize]uint8

func (mem *Memory) clear() {
	// clear memory
	for i := 0; i < len(mem); i++ {
		mem[i] = 0
	}

	// load fontset
	for i := 0; i < len(fontSet); i++ {
		mem[i + StartAddress] = fontSet[i]
	}
}

func (mem *Memory) fetchOpcode(addr uint16) uint16 {
	return uint16(mem[addr])<<8 | uint16(mem[addr+1])
}

func (mem *Memory) loadROM(bytes []byte) error {
	l := len(bytes)
	if l > MemorySize - StartAddress {
		return fmt.Errorf("ROM too big for memory: %d", l)
	}
	for i := 0; i < l; i++ {
		mem[StartAddress + i] = bytes[i]
	}
	return nil
}

var fontSet = []uint8{
	0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
	0x20, 0x60, 0x20, 0x20, 0x70, // 1
	0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
	0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
	0x90, 0x90, 0xF0, 0x10, 0x10, // 4
	0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
	0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
	0xF0, 0x10, 0x20, 0x40, 0x40, // 7
	0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
	0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
	0xF0, 0x90, 0xF0, 0x90, 0x90, // A
	0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
	0xF0, 0x80, 0x80, 0x80, 0xF0, // C
	0xE0, 0x90, 0x90, 0x90, 0xE0, // D
	0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
	0xF0, 0x80, 0xF0, 0x80, 0x80, // F
}
